 var WorkflowDesignerConstants = {
  ActivityColor: "#ECF0F1",
  ActivityTextColor: "#2D3436",
  ActivityInitialColor: "#27AE60",
  ActivityInitialTextColor: "#FFFFFF",
  ActivityFinalColor: "#2980B9",
  ActivityFinalTextColor: "#FFFFFF",
  ActivityShape: "#CECECE",
  SelectColor: "#F39C12",
  SelectTextColor: "#FFFFFF",
  SelectSubProcessColor: "#e3b015",
  SelectSubProcessTextColor: "#FFFFFF",
  ButtonActive: "#D4D8D9",
  BarColor: "#EDF1F2",
  BarSeparatorColor: "#D9DEE0",
  DeleteConfirm: "Вы действительно хотите удалить выбранные элементы?",
  DeleteConfirmCurrent: "Вы уверены, что хотите удалить этот элемент?",
  FieldIsRequired: "Поле обязательное для заполнения!",
  FieldMustBeUnique: "Поле должно быть уникальным!",
  ButtonTextDelete: "Удалить",
  ButtonTextCreate: "Создать",
  ButtonTextSave: "Сохранить",
  ButtonTextYes: "Да",
  ButtonTextNo: "Нет",
  ButtonTextOk: "Ok",
  ButtonTextCancel: "Отменить",
  ButtonTextClose: "Закрыть",
  ButtonTextUndo: "Отменить",
  ButtonTextRedo: "Повторить",
  SaveConfirm: "Сохранить изменения?",
  CloseWithoutSaving: "Закрыть без сохранения?",
  TransitionAuto: "Auto",
  DialogConfirmText: "Вопрос",
  AlertTitle: "Warning",
  None: "Никто",
  Warning: "Предупреждение",
  SwitchToExpertMode: "Switch To Expert Mode",
  SwitchToDefaultMode: "Switch To Default Mode",
  InfoBlockLabel: {
    Activity: "Состояния:",
    Transition: "Переходы:",
    Command: "Команды:"
  },
  ActivityNamePrefix: "Деятельность_",
  ActivityFormLabel: {
    Title: "Деятельность",
    TitleForInline: "Activity Inline",
    Name: "Наименование",
    State: "Статус",
    IsInitial: "Начальный",
    IsFinal: "Конечный",
    IsForSetState: "Произвольная установка",
    IsAutoSchemeUpdate: "Автоматическое обновление схемы",
    Implementation: "Реализация",
    PreExecutionImplementation: "Реализация PreExcecute",
    ImpOrder: "Порядок",
    ImpAction: "Действие",
    ImpActionParameter: "Параметр действия",
    Annotations: "Annotations",
    AnnotationName: "Name",
    AnnotationValue: "Value",
    Scheme: "Inline scheme",
    AlwaysConditionShouldBeSingle: "Условие 'всегда' должно быть одно",
    OtherwiseConditionShouldBeSingle: "Условие 'в противном случае' должно быть одно"
  },
  TransitionFormLabel: {
    Title: "Переход",
    Name: "Наименование",
    From: "От деятельности",
    To: "К деятельности",
    Classifier: "Классификатор",
    Restrictions: "Ограничения",
    RestrictionsType: "Тип",
    RestrictionsActor: "Актер",
    Condition: "Состояние",
    ConditionType: "Тип",
    ConditionAction: "Действие",
    ResultOnPreExecution: "Результат выполнения операции",
    Trigger: "Триггер",
    TriggerType: "Тип",
    TriggerAuto: "Auto",
    TriggerCommand: "Команда",
    TriggerTimer: "Таймер",
    ConditionActionParameter: "Параметр действия",
    ConditionExpression: "Expression",
    ConditionInversion: "Инвертировать результат",
    ConditionsConcatenationType: "Тип конкатенации условий",
    AllowConcatenationType: "Конкатенацию разрешить как",
    RestrictConcatenationType: "Конкатинация",
    IsFork: "Является стартом дочернего процесса",
    MergeViaSetState: "Объединить подпроцесс через заданное состояние",
    DisableParentStateControl: "Отключить родительский контроль процесса",
    ShowConcatParameters: "Показать конкатенацию",
    HideConcatParameters: "Скрыть конкатенацию",
    Annotations: "Annotations",
    AnnotationName: "Name",
    AnnotationValue: "Value",
    InlinedFinalActivityName: "Inlined Final Activity Name",
    Allow: "Allow",
    Restrict: "Restrict",
    ConditionsListShouldNotBeEmpty: "Список условий не должен быть пустым",
    AlwaysConditionShouldBeSingle: "Always condition should be single",
    OtherwiseConditionShouldBeSingle: "Otherwise condition should be single",
    ConditionalLabel: "Conditional",
    AlwaysLabel: "Always",
    ActionLabel: "Action",
    ExpressionLabel: "Expression",
    OtherwiseLabel: "Otherwise",
    Subprocess: "Subprocess",
    SubprocessNone: "None",
    SubprocessStart: "Start",
    SubprocessFinalize: "Finalize",
    SubprocessAuto: "Auto",
    SubprocessStartSettings: "Subprocess start settings",
    SubprocessFinalizeSettings: "Subprocess finalize settings",
    SubprocessName: "Subprocess name",
    SubprocessId: "Subprocess id",
    SubprocessIdPlaceholder: "Autogenerated GUID",
    SubprocessNamePlaceholder: "Same as transition name",
    SubprocessStartupType: "Subprocess startup type",
    SubprocessStartupTypeSameThread: "Same thread",
    SubprocessStartupTypeAnotherThread: "Another thread",
    SubprocessStartupTypeTimerQueue: "Timer queue",
    SubprocessStartupParameterCopyStrategy: "Parameters copy strategy",
    SubprocessStartupParameterCopyStrategyCopyAll: "Copy all",
    SubprocessStartupParameterCopyStrategyIgnoreAll: "Ignore all",
    SubprocessStartupParameterCopyStrategyCopySpecified: "Copy specified",
    SubprocessStartupParameterCopyStrategyIgnoreSpecified: "Ignore specified",
    SubprocessSpecifiedParameters: "Specified parameters",
    SubprocessFinalizeParameterMergeStrategy: "Parameters merge strategy",
    SubprocessFinalizeParameterMergeStrategyOverwriteAllNulls: "Overwrite all nulls",
    SubprocessFinalizeParameterMergeStrategyOverwriteAll: "Overwrite all",
    SubprocessFinalizeParameterMergeStrategyOverwriteSpecified: "Overwrite specified",
    SubprocessFinalizeParameterMergeStrategyDontOverwriteSpecified: "Don't overwrite specified"
  },
  LocalizationFormLabel: {
    Title: "Локализация",
    ObjectName: "ObjectName",
    Type: "Тип",
    IsDefault: "IsDefault",
    Culture: "Культура",
    Value: "Значение",
    Types: [
      "Command",
      "State",
      "Parameter"
    ]
  },
  TimerFormLabel: {
    Title: "Таймеры",
    Name: "название",
    Type: "Тип",
    Value: "Значение",
    Types: [
      "Command",
      "State",
      "Parameter"
    ],
    OverrideHint: "Переопределять таймер, если он существует",
    Override: "Переопределять"
  },
  ParameterFormLabel: {
    Title: "Параметры",
    Name: "Наименование",
    Type: "Тип",
    Purpose: "Цель",
    Value: "Значение",
    InitialValue: "Начальное значение",
    ShowSystemParameters: "Показать параметры системы"
  },
  ActorFormLabel: {
    Title: "Актеры",
    Name: "Наименование",
    Rule: "Правило",
    Value: "Значение"
  },
  CommandFormLabel: {
    Title: "Команда",
    Name: "Наименование",
    InputParameters: "Входные параметры",
    InputParametersName: "Название",
    InputParametersIsRequired: "Обязательный",
    InputParametersParameter: "Параметр",
    InputParametersDefaultValue: "По умолчанию"
  },
  CommandParametersFormLabel: {
    Title: "command parameters",
    InputParametersName: "Name",
    InputParametersIsRequired: "Required",
    InputParametersParameter: "Parameter",
    InputParametersDefaultValue: "Default"
  },
  ProcessInfoFormLabel: {
    Title: "Additional Parameters",
    IsObsolete: "IsObsolete",
    DefiningParameters: "Defining parameters",
    ProcessParameters: "Process parameters",
    SystemParametersTabName: "System Parameters",
    ProcessParametersTabName: "Process Parameters",
    HistoryTabName: "History",
    TimersTabName: "Timers",
    TagsTabName: "Tags",
    TagsInputPlaceholder: "Start entering a name to add a tag",
    HistoryTabFromLabel: "From",
    HistoryTabFromStateLabel: "From State",
    HistoryTabToLabel: "To",
    HistoryTabToStateLabel: "To State",
    HistoryTabExecutorIdLabel: "Executor Id",
    HistoryTabActorIdLabel: "Actor Id",
    HistoryTabTimeLabel: "Time",
    HistoryTabTriggerNameLabel: "Trigger Name",
    HistoryTabTransitionClassifierNameLabel: "",
    ParametersNameLabel: "Name",
    ParametersValueLabel: "Value",
    TimersTabNameLabel: "Name",
    TimersTabValueLabel: "Value",
    RootProcess: "Root Process",
    TagsLabel: "Tags (separated by commas)",
    GeneralTabLabel: "General",
    ProcessIdLabel: "Process Id"
  },
  DropdownValues: {
    Name: "Name",
    Value: "Value",
    Dropdown: "Dropdown",
    Values: "values"
  },
  CodeActionsFormLabel: {
    Title: "Действия",
    Name: "Наимедование",
    ActionCode: "Код действия",
    IsGlobal: "Является глобальным",
    IsAsync: "Асинхронный",
    Type: "Тип",
    GlobalDeleteMessage: "Если вы удалите Global CodeAction - <br/> <b> другие схемы не смогут его вызвать! </b>",
    UnGlobalMessage: "Вы изменили состояние глобального флага. <br/> После сохранения этой схемы будет создано локальное действие, основанный на этом глобальном действии.",
    EditParameters: "Edit parameters",
    Parameters: "Parameters",
    Text: "Text",
    TextArea: "TextArea",
    Number: "Number",
    Checkbox: "Checkbox",
    Dropdown: "Dropdown",
    MultiSelect: "MultiSelect",
    DateTime: "Date/Time",
    Values: "Values",
    DropdownName: "Name",
    DropdownValue: "Value",
    DropdownShouldContainValues: "Dropdown should contain values",
    IsRequired: "Required",
    DefaultValue: "Default value",
    Json: "Json",
    TitleField: "Title"
  },
  EditParametersFormlabel: {
    Title: "Edit parameter values",
    NumberRequired: "Should be a numeric value",
    DateShouldBeInISOFormat: "Date/Time parameter should be in ISO8601 format",
    SwitchToJson: "Switch to JSON editor",
    SwitchToConstructor: "Switch to parameter values editor",
    InvalidJson: "JSON object is invalid or does not match the model"
  },
  ToolbarLabel: {
    CreateActivity: "Создать активности",
    CreateInline: "Create inline (template)",
    CopySelected: "Копировать выбранные",
    Undo: "Отменить",
    Redo: "Повторить",
    Move: "Двигать",
    ZoomIn: "Приблизить",
    ZoomOut: "Уменьшить",
    ZoomPositionDefault: "Установить масштаб по умолчанию",
    FullScreen: "Полноэкранный",
    Refresh: "Обновить",
    AutoArrangement: "Автоматическое расположение",
    Actors: "Актеры",
    Commands: "Команды",
    Parameters: "Параметры",
    Localization: "Локализация",
    Timers: "Таймеры",
    AdditionalParameters: "Дополнительные параметры",
    CodeActions: "Действия",
    Info: "Дополнительная информация",
    Delete: "Удалить",
    Clone: "Копировать",
    Settings: "Настройки",
    CreateTransition: "Создать переход",
    CreateActivityTransition: "Создать активности и переход",
    Legend: "Легенда",
    ProcessInfo: "Process Info",
    Inline: "The scheme can be inlined",
    Elements: "Elements",
    Library: "Library",
    ResetSettings: "Reset settings"
  },
  LibraryLabel: {
    PluginRequired: "Plugin required:"
  },
  ErrorActivityIsInitialCountText: "Один элемент должен быть отмечен флагом Начальный",
  ErrorActivityIsFinalCountText: "This scheme is Inlined. One or more elements must be marked flag Final",
  ErrorReadOnlySaveText: "Конструктор в режиме ReadOnly, вы не можете его сохранить.",
  ErrorInvalidObjectsSaveText: "Can't save the schema. Those objects are in invalid state",
  BrokenReferencesDialogText: "This schema contains references to Actions, Conditions or Rules that aren't defined by this schema or current action providers. Do you want to keep them?",
  EditCodeSettings: {
    Height: 600,
    Width: 1000,
    CodeHeight: 390,
    MessageBoxHeight: 400,
    MessageBoxWidth: 600,
    SuccessBoxHeight: 150,
    SuccessBoxWidth: 300
  },
  EditCodeLabel: {
    Title: "Изменить код",
    EditCodeButton: "Изменить код",
    Usings: "Usings",
    Compile: "Компилировать",
    CompileSucceeded: "Компиляция прошла успешно.",
    Success: "Успех",
    Error: "Ошибка",
    OK: "OK",
    ShowUsings: "Показать события",
    HideUsings: "Скрыть записи"
  },
  EditJSONLabel: {
    Title: "Изменить значение в JSON",
    CreateEmptyType: "Создать",
    Format: "Формат"
  },
  EditExpressionSettings: {
    Height: 600,
    Width: 1000,
    CodeHeight: 390,
    MessageBoxHeight: 400,
    MessageBoxWidth: 600,
    SuccessBoxHeight: 150,
    SuccessBoxWidth: 300
  },
  EditExpressionLabel: {
    Title: "Edit expression",
    Validate: "Validate",
    Succeeded: "Expression is valid.",
    Success: "Success",
    Error: "Error",
    OK: "OK"
  },
  Elements: {
    Header: "Elements",
    BasicActivity: "Basic Activity",
    BasicActivityDesc: "It determines a state and the order, in which Actions are executed in your process.",
    InlineHeader: "Inline",
    InitialActivity: "Initial Activity",
    InitialActivityDesc: "It a initial state.",
    FinalActivity: "Final Activity",
    FinalActivityDesc: "It a final state."
  },
  OverviewMap: {
    show: true,
    width: 300,
    height: 150
  },
  UndoDepth: 200,
  DefaultCulture: "ru-RU",
  ErrorInBrowserConsole: "See more info in the browser console.",
  DropdownValue: {
    Name: "Name",
    Value: "Value",
    Dropdown: "Dropdown",
    Values: "values"
  },
  EditJSONSettings: {
    Height: 600,
    Width: 1000,
    CodeHeight: 480
  }
};